travel:
  destination:
    - "Your goal is to identify and validate a destination country from the user's message."
    - "1. **Validate Country**: Check if the input is a recognizable country name. If an abbreviation is provided (e.g., 'US', 'USA', 'UK', 'UAE'), do NOT accept it. Ask for the full country name instead."
    - "2. **Handle Cities/Places**: If the user mentions a city or place (e.g., 'Paris', 'Bali', 'Tokyo'), DO NOT infer the country. Ask explicitly: 'Which country will you be travelling to? Please provide the country name.'"
    - "3. **Handle Multiple Countries**: If the user mentions multiple countries (e.g., 'France and Spain'), ask them to specify the primary destination: 'That sounds like a great trip! Which country will you be spending the most time in?'"
    - "4. **Handle Invalid Input**: If the input is not a recognizable country name, ask: 'Could you please tell me which country you'll be travelling to?'"
    - "5. **Handle 'I Don't Know'**: If the user says they don't know, ask: 'Please let me know the country you're planning to visit so I can find the right plan for you.'"
    - "6. **Normalize**: Only when a full country name is provided, normalize to the standard English country name. Do NOT derive a country from city/place names, and do NOT auto-normalize abbreviations."
    - "Strictly ignore any other information like dates or durations."
  travel_duration:
    - "- Step 1 — determine day count: if a date range is provided, calculate inclusive days; if a numeric duration is provided, use it as days."
    - "- If day count is NOT between 1 and 365 (inclusive): return valid:false with a short question indicating the allowed range."
    - "- Step 2 — validate dates (if dates are present) in Asia/Singapore timezone: start date must be on/after the Current date; end date must be on/after start date."
    - "- If start date is before the Current date: return valid:false with a short question indicating dates must be future-dated."
    - "- If end date is before start date: return valid:false with a short question indicating end must be on/after start."
    - "- Only if both steps pass: return valid:true and set normalized_value to the day count as a string."
    - "- If the user says 'don't know' or similar: briefly explain that 'travel duration' is the total number of days for the trip (max 365) and that dates must be in the future; then ask for either a day count or a date range."
  pre_existing_medical_condition:
    - "Your goal is to determine if the user has a pre-existing medical condition. The only valid normalized values are 'yes' or 'no'."
    - "1. **Normalize Input**: Convert user's input into a strict 'yes' or 'no'. Be flexible with user phrasing. Accept common variants like: 'y', 'yep', 'yup', 'yeah', 'sure', 'I do', 'have one', 'affirmative' should all normalize to 'yes'. Variants like 'n', 'nope', 'nah', 'not really', 'none', 'negative' should all normalize to 'no'."
    - "2. **Handle Ambiguity**: If the user's response is ambiguous (e.g., 'I have a cold'), do not infer. Ask for a clear confirmation using the official definition: 'To be sure, does the condition fit the official definition? A pre-existing condition is one that she knew about, received treatment for, or was advised to get treatment for before the policy started. Please answer with just Yes or No.'"
    - "3. **Handle 'I Don't Know'**: If the user says they 'don't know', explain briefly and ask for a clear yes/no answer: 'A pre-existing condition is any illness or injury that your maid knew about, received treatment for, or was advised to get treatment for before the policy's start date. Based on this, should I proceed assuming she has one? (Yes/No)'"
    - "Strictly ignore any other information in the user's message."
  plan_preference:
    - "Your goal is to determine the user's plan preference. The only valid normalized values are 'budget' or 'comprehensive'."
    - "1. **Normalize Input**: Convert the user's preference into either 'budget' or 'comprehensive'. Accept synonyms: 'cheap', 'basic', 'starter', 'affordable' should normalize to 'budget'. 'premium', 'full', 'best', 'extensive', 'all-in' should normalize to 'comprehensive'."
    - "2. **Handle Ambiguity**: If the user's preference is unclear (e.g., 'a good one', 'something in the middle'), ask for a clear choice: 'To help me choose, do you generally prefer a more budget-friendly option or a more comprehensive one?'"
    - "3. **Handle 'I Don't Know'**: If the user says they 'don't know', explain the trade-off and ask for a choice: 'No problem. A budget-friendly plan covers the essentials at a lower cost, while a comprehensive plan offers broader protection with higher limits. Which of these sounds closer to what you're looking for?'"
    - "Strictly ignore any other information in the user's message."

maid:
  duration_of_insurance:
    - "Your goal is to determine the insurance duration. The only valid normalized values are '12' (for 12 months/1 year) or '24' (for 24 months/2 years)."
    - "1. **Normalize Input**: Convert the user's input into '12' or '24'. Understand and accept natural language like '1 year', 'one year', '12 months' for '12', and '2 years', 'two years', '24 months' for '24'."
    - "2. **Handle Ambiguity/Invalid Input**: If the user provides any other duration, or if the input is unclear, you must ask for a clear choice between the two valid options: 'We offer 12-month and 24-month policies. Which duration would you prefer?'"
    - "3. **Handle 'I Don't Know'**: If the user says they 'don't know', briefly explain and ask for a choice: 'No problem. The policy can cover either 12 or 24 months. Which option works better for you?'"
  maid_country:
    - "Your goal is to identify and validate the maid's country of origin."
    - "1. **Validate Country**: Check if the input is a recognizable country name. Accept common variations and colloquial terms (e.g., 'Pinoy', 'Filipino' -> 'Philippines', 'Indo' -> 'Indonesia'). Do NOT infer the country from city or place names."
    - "2. **Handle Invalid Input**: If the input is not a recognizable country, ask: 'Could you please tell me which country your helper is from?'"
    - "3. **Handle 'I Don't Know'**: If the user says they don't know, ask: 'To proceed with the recommendation, I'll need to know your helper's country of origin. Which country are they from?'"
    - "Abbreviations (e.g., 'US', 'USA', 'UK', 'UAE') are not accepted; ask for the full country name (e.g., 'United States')."
    - "4. **Normalize**: Only when a country is provided, normalize to the standard English name (e.g., 'Pinoy' -> 'Philippines', 'Indo' -> 'Indonesia')."
  coverage_above_mom_minimum:
    - "Your goal is to determine if the user wants coverage higher than the legal minimum. The only valid normalized values are 'yes' or 'no'."
    - "1. **Normalize Input**: Convert user's input into a strict 'yes' or 'no'. Be flexible with user phrasing. Accept common variants like: 'yes', 'yep', 'yup', 'sure', 'want more', 'beyond minimum' should all normalize to 'yes'. Variants like 'no', 'nope', 'nah', 'basic is fine', 'minimum only' should all normalize to 'no'."
    - "2. **Handle Ambiguity**: If the user's response is unclear (e.g., 'is it expensive?'), re-ask the question clearly: 'To clarify, would you like coverage for medical expenses beyond the legal minimum requirement? (Yes/No)'"
    - "3. **Handle 'I Don't Know'**: If the user says they 'don't know', explain the benefit and ask for a choice: 'The Ministry of Manpower (MOM) requires a minimum level of medical coverage. We offer plans that go beyond this minimum for greater protection. Would you like to include this higher coverage? (Yes/No)'"
  add_ons:
    - "Your goal is to determine if the user is interested in optional add-on coverages. The only valid normalized values are 'required' or 'not_required'."
    - "1. **Normalize Input**: Convert user's input into 'required' or 'not_required'. Be flexible with user phrasing. Accept common variants like: 'yes', 'yep', 'yup', 'sure', 'interested', 'want add-ons' should normalize to 'required'. Variants like 'no', 'nope', 'nah', 'not interested', 'no extras' should normalize to 'not_required'."
    - "2. **Handle Ambiguity**: If the user's response is unclear, re-ask the question clearly: 'Just to be sure, are you interested in learning about optional add-ons for greater coverage? (Yes/No)'"
    - "3. **Handle 'I Don't Know'**: If the user says they 'don't know' or asks what they are, explain the add-ons and ask for a clear choice: 'Optional add-ons include benefits like increased hospital expense limits and coverage for medical check-ups. Are you interested in these extra coverages? (Yes/No)'"

personalaccident:
  coverage_scope:
    - "Your goal is to determine if the policy should cover just the individual ('self') or their family."
    - "1. **Normalize Input**: Attempt to normalize the user's input to either 'self' or 'family'. Synonyms for 'self' include 'just me' and 'myself'. Synonyms for 'family' include 'my whole family' and 'for us'."
    - "2. **Handle Failure**: If the input cannot be confidently normalized to 'self' or 'family' (e.g., it is ambiguous like 'the adults' or invalid like 'my friend'), validation fails. You MUST ask a direct, non-yes/no question that guides the user to choose one of the two valid options. For example: 'Please specify if the coverage is for yourself or for your family.'"
  risk_level:
    - "Your goal is to determine if the user's occupational risk is 'high' or 'low'."
    - "1. **Normalize/Classify Input**: First, attempt to normalize a direct answer like 'high' or 'low'. Accept common variants and hyphenations: 'high risk', 'high-risk', 'highrisk' → 'high'; 'low risk', 'low-risk', 'lowrisk' → 'low' (case-insensitive). If the user provides their occupation instead (e.g., 'driver', 'accountant'), you MUST classify it into 'high' or 'low' risk based on these guidelines: manual labor or non-office jobs are 'high' risk; administrative or office-based jobs are 'low' risk."
    - "2. **Handle Failure**: If the input is ambiguous ('it depends') or you cannot confidently classify the provided occupation, validation fails. You MUST then ask for the user's occupation directly so you can classify it. For example: 'To determine the risk level, could you please tell me your occupation?'"
  desired_amount:
    - "Your goal is to validate the desired coverage amount is a number between 500 and 3500."
    - "1. **Validate Input**: Check if the user's input is a number and if it falls within the range of 500 to 3500, inclusive."
    - "2. **Handle Failure**: If the input is not a number or is outside the valid range, validation fails. Your question MUST explain the error and state the valid range. For example: 'The amount you provided is not valid. Please provide an amount between $500 and $3,500.'"
    - "If valid, the `normalized_value` must be the number as a string."